#version 330 core
in vec3 fragNormal;
in vec3 fragPos;
out vec4 frag_colour;

uniform vec3 lightPosition;
uniform vec3 lightColor;
uniform vec3 viewPosition;
uniform vec3 objectColor;

void main () { 
    // Výpočet difuzního osvětlení
    vec3 lightVector = normalize(lightPosition - fragPos);
    float dot_product = max(dot(lightVector, normalize(fragNormal)), 0.0);
    vec3 diffuse = dot_product * lightColor * objectColor;

    // Ambientní osvětlení
    vec3 ambient = lightColor * 0.5;

    // Blinn-Phong spekulární osvětlení
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPosition - fragPos);

    // Poloviční vektor mezi směrem pohledu a směrem světla
    vec3 halfwayDir = normalize(lightVector + viewDir);
    float spec = pow(max(dot(normalize(fragNormal), halfwayDir), 0.0), 32); // 32 je exponent pro lesklost
    vec3 specular = specularStrength * spec * lightColor;

    // Kombinace všech složek osvětlení
    vec3 result = (ambient + diffuse + specular) * objectColor;
    frag_colour = vec4(result, 1.0);
}