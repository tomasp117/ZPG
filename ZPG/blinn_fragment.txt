#version 330

#define MAX_LIGHTS 4

struct Light {
    vec3 lightPosition;
    vec3 lightColor;
    float ambientStrength;
};

in vec3 fragNormal;
in vec3 fragPos;
out vec4 frag_colour;

uniform Light lights[MAX_LIGHTS];
uniform int numLights;
uniform vec3 objectColor;
uniform vec3 viewPosition;

uniform float quadratic = 0.25;

void main() {
    vec4 result = vec4(0.0);
    vec3 norm = normalize(fragNormal);

    for (int i = 0; i < numLights; i++) {
        vec3 lightVector = normalize(lights[i].lightPosition - fragPos);
        float distance = length(lights[i].lightPosition - fragPos);
        float attenuation = 1.0 / (quadratic * (distance * distance));

        vec4 ambient = vec4(lights[i].ambientStrength * lights[i].lightColor, 1.0);

        float diff = max(dot(norm, lightVector), 0.0);
        vec4 diffuse = diff * vec4(lights[i].lightColor, 1.0);

        vec3 viewDir = normalize(viewPosition - fragPos);
        vec3 halfwayDir = normalize(lightVector + viewDir);
        float spec = pow(max(dot(norm, halfwayDir), 0.0), 32);
        vec4 specular = spec * vec4(lights[i].lightColor, 1.0);

        result += (ambient + diffuse + specular) * attenuation;
    }

    frag_colour = result * vec4(objectColor, 1.0);
}