#version 330
in vec3 fragNormal;      
in vec3 fragPos;          
out vec4 frag_colour;     
uniform vec3 viewPosition; 
void main () {
    vec3 lightPosition = vec3(0.0, 0.0, 0.0);  
    vec3 lightVector = normalize(lightPosition - fragPos);
    float dot_product = max(dot(lightVector, normalize(fragNormal)), 0.0);
    vec4 diffuse = dot_product * vec4(0.385, 0.647, 0.812, 1.0);
    vec4 ambient = vec4(0.1, 0.1, 0.1, 1.0);
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPosition - fragPos);
    vec3 reflectDir = reflect(-lightVector, normalize(fragNormal));
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec4 specular = specularStrength * spec * vec4(1.0, 1.0, 1.0, 1.0);
    frag_colour = ambient + diffuse + specular;
}