#version 330
in vec3 fragNormal;
in vec3 fragPos;
out vec4 frag_colour;

uniform vec3 lightPosition;
uniform vec3 lightColor;
uniform vec3 viewPosition;
uniform vec3 objectColor;

void main () { 
    vec3 lightVector = normalize(lightPosition - fragPos);
    float dot_product = max(dot(lightVector, normalize(fragNormal)), 0.0);
    vec3 diffuse = dot_product * objectColor;
    vec3 ambient = lightColor * 0.1; // pøidáme faktor pro ambientní svìtlo

    float specularStrength = 0.5;

    vec3 viewDir = normalize(viewPosition - fragPos);
    vec3 reflectDir = reflect(-lightVector, normalize(fragNormal));
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    vec3 result = (ambient + diffuse + specular) * objectColor;
    frag_colour = vec4(result, 1.0);
}